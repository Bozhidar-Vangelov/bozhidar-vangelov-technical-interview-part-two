{"ast":null,"code":"export const getEntries = function (object) {\n  let parentKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return Object.entries(object).flatMap(_ref => {\n    let [key, value] = _ref;\n\n    if (typeof value === 'object') {\n      return getEntries(value, `${key} `);\n    }\n\n    return [[`${parentKey}${key}`, value]];\n  });\n};\nexport const getDifferences = (a, b) => Object.entries(a).map(_ref2 => {\n  let [key, value] = _ref2;\n\n  if (b[key] !== value) {\n    return {\n      [key]: b[key]\n    };\n  }\n\n  return false;\n}).filter(Boolean).reduce((result, current) => ({ ...result,\n  ...current\n}), {});","map":{"version":3,"sources":["/home/bvangelov/projects/bozhidar-vangelov-technical-interview-part-two/src/utils.js"],"names":["getEntries","object","parentKey","Object","entries","flatMap","key","value","getDifferences","a","b","map","filter","Boolean","reduce","result","current"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG,UAACC,MAAD;AAAA,MAASC,SAAT,uEAAqB,EAArB;AAAA,SACxBC,MAAM,CAACC,OAAP,CAAeH,MAAf,EAAuBI,OAAvB,CAA+B,QAAkB;AAAA,QAAjB,CAACC,GAAD,EAAMC,KAAN,CAAiB;;AAC/C,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOP,UAAU,CAACO,KAAD,EAAS,GAAED,GAAI,GAAf,CAAjB;AACD;;AAED,WAAO,CAAC,CAAE,GAAEJ,SAAU,GAAEI,GAAI,EAApB,EAAuBC,KAAvB,CAAD,CAAP;AACD,GAND,CADwB;AAAA,CAAnB;AASP,OAAO,MAAMC,cAAc,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAC5BP,MAAM,CAACC,OAAP,CAAeK,CAAf,EACGE,GADH,CACO,SAAkB;AAAA,MAAjB,CAACL,GAAD,EAAMC,KAAN,CAAiB;;AACrB,MAAIG,CAAC,CAACJ,GAAD,CAAD,KAAWC,KAAf,EAAsB;AACpB,WAAO;AAAE,OAACD,GAAD,GAAOI,CAAC,CAACJ,GAAD;AAAV,KAAP;AACD;;AAED,SAAO,KAAP;AACD,CAPH,EAQGM,MARH,CAQUC,OARV,EASGC,MATH,CASU,CAACC,MAAD,EAASC,OAAT,MAAsB,EAAE,GAAGD,MAAL;AAAa,KAAGC;AAAhB,CAAtB,CATV,EAS4D,EAT5D,CADK","sourcesContent":["export const getEntries = (object, parentKey = '') =>\n  Object.entries(object).flatMap(([key, value]) => {\n    if (typeof value === 'object') {\n      return getEntries(value, `${key} `);\n    }\n\n    return [[`${parentKey}${key}`, value]];\n  });\n\nexport const getDifferences = (a, b) =>\n  Object.entries(a)\n    .map(([key, value]) => {\n      if (b[key] !== value) {\n        return { [key]: b[key] };\n      }\n\n      return false;\n    })\n    .filter(Boolean)\n    .reduce((result, current) => ({ ...result, ...current }), {});\n"]},"metadata":{},"sourceType":"module"}