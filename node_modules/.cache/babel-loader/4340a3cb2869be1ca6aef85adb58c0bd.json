{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst baseUrl = 'https://jsonplaceholder.typicode.com/';\nexport const posts = createApi({\n  reducerPath: 'posts',\n  tagTypes: ['User'],\n  baseQuery: fetchBaseQuery({\n    baseUrl\n  }),\n  endpoints: builder => ({\n    getUserPosts: builder.query({\n      query: userId => ({\n        url: 'posts',\n        params: {\n          userId\n        }\n      })\n    }),\n    createPost: builder.mutation({\n      query: _ref => {\n        let {\n          userId,\n          ...body\n        } = _ref;\n        return {\n          url: 'posts',\n          params: {\n            userId\n          },\n          method: 'POST',\n          body: {\n            userId,\n            ...body\n          }\n        };\n      },\n\n      async onQueryStarted(_ref2, _ref3) {\n        let {\n          userId,\n          ...patch\n        } = _ref2;\n        let {\n          dispatch,\n          queryFulfilled\n        } = _ref3;\n        const patchResult = dispatch(posts.util.updateQueryData('getUserPosts', userId, draft => {\n          const lastId = draft[draft.length - 1].id;\n          draft.push({\n            userId,\n            id: lastId + 1,\n            ...patch\n          });\n        }));\n\n        try {\n          await queryFulfilled;\n        } catch {\n          patchResult.undo();\n        }\n      }\n\n    }),\n    deletePost: builder.mutation({\n      query: _ref4 => {\n        let {\n          id\n        } = _ref4;\n        return {\n          url: `posts/${id}`,\n          method: 'DELETE'\n        };\n      },\n\n      async onQueryStarted(_ref5, _ref6) {\n        let {\n          userId,\n          id\n        } = _ref5;\n        let {\n          dispatch,\n          queryFulfilled\n        } = _ref6;\n        await queryFulfilled;\n        dispatch(posts.util.updateQueryData('getUserPosts', id, postList => {\n          console.log({\n            userId,\n            id\n          });\n          const postIndex = postList.findIndex(post => post.id === id && post.userId === userId);\n          delete postList[postIndex];\n        }));\n      }\n\n    })\n  })\n});\nexport const {\n  useGetUserPostsQuery,\n  useCreatePostMutation,\n  useDeletePostMutation\n} = posts;","map":{"version":3,"sources":["/home/bvangelov/projects/bozhidar-vangelov-technical-interview-part-two/src/services/posts.js"],"names":["createApi","fetchBaseQuery","baseUrl","posts","reducerPath","tagTypes","baseQuery","endpoints","builder","getUserPosts","query","userId","url","params","createPost","mutation","body","method","onQueryStarted","patch","dispatch","queryFulfilled","patchResult","util","updateQueryData","draft","lastId","length","id","push","undo","deletePost","postList","console","log","postIndex","findIndex","post","useGetUserPostsQuery","useCreatePostMutation","useDeletePostMutation"],"mappings":"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","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nconst baseUrl = 'https://jsonplaceholder.typicode.com/'\n\nexport const posts = createApi({\n  reducerPath: 'posts',\n  tagTypes: ['User'],\n  baseQuery: fetchBaseQuery({ baseUrl }),\n  endpoints: builder => ({\n    getUserPosts: builder.query({\n      query: userId => ({\n        url: 'posts',\n        params: { userId }\n      })\n    }),\n    createPost: builder.mutation({\n      query: ({ userId, ...body }) => ({\n        url: 'posts',\n        params: { userId },\n        method: 'POST',\n        body: {\n          userId,\n          ...body\n        }\n      }),\n      async onQueryStarted({ userId, ...patch }, { dispatch, queryFulfilled }) {\n        const patchResult = dispatch(\n          posts.util.updateQueryData('getUserPosts', userId, draft => {\n            const lastId = draft[draft.length - 1].id\n            draft.push({ userId, id: lastId + 1, ...patch })\n          })\n        )\n        try {\n          await queryFulfilled\n        } catch {\n          patchResult.undo()\n        }\n      }\n    }),\n    deletePost: builder.mutation({\n      query: ({ id }) => ({\n        url: `posts/${id}`,\n        method: 'DELETE'\n      }),\n      async onQueryStarted({ userId, id }, { dispatch, queryFulfilled }) {\n        await queryFulfilled\n        dispatch(\n          posts.util.updateQueryData('getUserPosts', id, postList => {\n            console.log({userId, id })\n            const postIndex = postList.findIndex(post => post.id === id && post.userId === userId)\n\n            delete postList[postIndex]\n          })\n        )\n      }\n    })\n  })\n})\n\nexport const { useGetUserPostsQuery, useCreatePostMutation, useDeletePostMutation } = posts\n"]},"metadata":{},"sourceType":"module"}